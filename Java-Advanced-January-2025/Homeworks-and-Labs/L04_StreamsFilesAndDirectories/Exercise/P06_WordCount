package L04_StreamsFilesAndDirectories_Exercises;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class P06_WordCount {
    public static void main(String[] args) throws IOException {


        Path firstPath = Paths.get("C:\\Users\\admin\\Desktop\\Java Advanced\\Java-Advanced-January-2025\\src\\L04_StreamsFilesAndDirectories_Exercises\\Resources\\words.txt");
        Path secondPath = Paths.get("C:\\Users\\admin\\Desktop\\Java Advanced\\Java-Advanced-January-2025\\src\\L04_StreamsFilesAndDirectories_Exercises\\Resources\\text.txt");

        Map<String, Integer> countWords = new HashMap<>();


                List<String> allLinesWithWords = Files.readAllLines((firstPath));

                for (String line : allLinesWithWords){
                    Arrays.stream(line.split("\\s+"))
                            .forEach(word ->
                                    countWords.put(word, 0));
                }


                List<String> allLinesFromText = Files.readAllLines((secondPath));

                for (String line : allLinesFromText){
                    Arrays.stream(line.split("\\s+"))
                            .forEach(word -> {
                                if(countWords.containsKey(word)){
                                    int currentCount = countWords.get(word);
                                    countWords.put(word, currentCount + 1);
                                }

                            });
                }

                PrintWriter writer = new PrintWriter("C:\\Users\\admin\\Desktop\\Java Advanced\\Java-Advanced-January-2025\\src\\L04_StreamsFilesAndDirectories_Exercises\\Resources\\result.txt");

                countWords.entrySet().stream()
                        .sorted((e1, e2) -> e2.getValue().compareTo(e1.getValue()))
                        .forEach(entry -> writer.println(entry.getKey() + " - " + entry.getValue()));

                writer.close();

                //compareTo -> 0 (е1 == е2), 1 (е1 > е2), -1 (е2 > е1)
                //sorted -> 0 (не разменя местата на елементите), 1 (разменя местата на е1 и е2), -1 (не разменя местата на елементите)

            }
        }
