package L08_Generics_Exercises.P07_CustomList;

import java.util.ArrayList;
import java.util.List;

public class CustomList<U extends Comparable<U>> {

    private List<U> list;

    public int size;

    public CustomList() {
        this.list = new ArrayList<>();
    }

    public void add(U element){
        this.list.add(element);
        this.size++;
    }

    public U remove(int index){

        if(isNotInRange(index)){
            return null;
        }
        this.size--;
        return this.list.remove(index);

    }


    public boolean contains(U element){

        return this.list.contains(element);
    }

    public void swap(int index1, int index2){
        if(isNotInRange(index1) || isNotInRange(index2)){
            System.out.println("First/Second index is/are not valid!");
        }else {
           U firstValue = list.get(index1);
           U secondValue = list.get(index2);
            this.list.set(index1, secondValue);
            this.list.set(index2, firstValue);
        }


    }
    //•	int countGreaterThan(T element)

    public int countGreaterThan(U elementToCompare){
        int count = 0;

        for (U element : this.list){
            //Сравняваме дали стойността от списъка е по-голяма от стойността с която сравняваме
            //първото > второто 1 или повече
            int result = element.compareTo(elementToCompare);
            if(result > 0){
                count++;
            }
        }
        return count;

    }
    //•	T getMax()
    public U getMax(){

        U max = this.list.getFirst();
        for (U currentElement : list){
            if(currentElement.compareTo(max) > 0){
                max = currentElement;
            }
        }

        return max;
        //return Collections.max(list);
    }

    //•	T getMin()
    public U getMin(){

        U min = this.list.getFirst();

        for (U currentElement : list){
            if(currentElement.compareTo(min) < 0){
                min = currentElement;
            }
        }
        return min;
    }

    public U get(int index){
        if(isNotInRange(index)){
            System.out.println("Invalid index!");
            return null;
        }

        return this.list.get(index);
    }

    private boolean isNotInRange(int index) {

        return index < 0 || index >= this.list.size();
    }

}
