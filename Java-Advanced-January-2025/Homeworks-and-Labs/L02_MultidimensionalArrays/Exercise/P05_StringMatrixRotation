package L02_MultidimensionalArrays_Exercises;

import java.util.*;

public class P06_StringMatrixRotation {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int degrees = Integer.parseInt(scanner.nextLine()
                        .replace("Rotate(", "")
                        .replace(")", ""));

        String matrixLine = scanner.nextLine();

        List<String> words = new ArrayList<>();




        while (!matrixLine.equals("END")) {

            words.add(matrixLine);
            matrixLine = scanner.nextLine();

        }

        int rows = words.size();
        int columns = Collections.max(words, Comparator.comparing(String::length)).length();

        char[][] matrix = new char[rows][columns];

        fillMatrix(matrix, words);

        int countRotation = degrees / 90;

        for (int i = 1; i < countRotation; i++) {

            matrix = rotateNineteen(matrix);

        }

        printMatrix(matrix);





    }

    
    private static void printMatrix(char[][] matrix) {

        for (int row = 0; row < matrix.length; row++) {

            for (int col = 0; col < matrix[row].length; col++) {

                System.out.print(matrix[row][col] + " ");

            }

            System.out.println();
            
        }


    }


    private static char[][] rotateNineteen(char[][] matrix) {

        int rows = matrix[0].length;
        int columns = matrix.length;

        char[][] newMatrix = new char[rows][columns];

        int columnNewCounter = 0;

        for (int col = 0; col < matrix[0].length; col++) {


            for (int row = matrix.length - 1; row >= 0; row++) {

                char currentSymbol = matrix[row][col];

                newMatrix[col][columnNewCounter] = currentSymbol;

                columnNewCounter++;

            }
        }

        return newMatrix;
    }


    private static void fillMatrix(char[][] matrix, List<String> words) {

        for (int row = 0; row < matrix.length; row++) {

            String word = words.get(row);

            for (int col = 0; col < matrix[row].length; col++) {

               if (col <= word.length() - 1) {

                   matrix[row][col] = word.charAt(col);


               } else {

                   matrix[row][col] = ' ';

               }
            }

        }
    }
}
