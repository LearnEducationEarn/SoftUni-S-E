package L02_MultidimensionalArrays_Lab;

import java.util.Scanner;

public class P07_FindTheRealQueen {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = 8;
        char[][] matrix = new char[n][n];

        fillMatrix(matrix, scanner);


        for (int row = 0; row < matrix.length; row++) {

            for (int col = 0; col < matrix[row].length; col++) {

                if (matrix[row][col] == 'q') {

                    boolean upPrimaryDiagonal = isUpPrimaryDiagonal(matrix, row - 1, col - 1);
                    boolean downPrimaryDiagonal = isDownPrimaryDiagonal(matrix, row + 1, col + 1);
                    boolean upSecondaryDiagonal = isUpSecondaryDiagonal(matrix, row - 1, col + 1);
                    boolean downSecondaryDiagonal = isDownSecondaryDiagonal(matrix, row + 1, col - 1);

                    boolean rowClear = isRowClear(matrix, row);
                    boolean colClear = isColClear(matrix, col);

                    boolean isFound = upPrimaryDiagonal && downPrimaryDiagonal
                                        && upSecondaryDiagonal && downSecondaryDiagonal
                                        && rowClear && colClear;

                    if (isFound) {

                        System.out.println(row + " " + col);

                        return;
                    }

                }
            }
        }
    }

    private static boolean isColClear(char[][] matrix, int col) {

        int countQueen = 0;

        for (int row = 0; row < matrix.length; row++) {

            if (matrix[row][col] == 'q') {

                countQueen++;

            }
        }

        return countQueen == 1;

    }

    private static boolean isRowClear(char[][] matrix, int row) {

        int countQueen = 0;

        for (int col = 0; col < matrix.length; col++) {

            if (matrix[row][col] == 'q') {

                countQueen++;

            }
        }

        return countQueen == 1;
    }

    private static boolean isDownSecondaryDiagonal(char[][] matrix, int row, int col) {

        while(row <= 7 && col >= 0) {

            if (matrix[row][col] == 'q') {

                return false;

            }

            row++;
            col--;
        }

        return true;
    }

    private static boolean isUpSecondaryDiagonal(char[][] matrix, int row, int col) {

        while (row >= 0 && col <= 7) {

            if (matrix[row][col] == 'q') {

                return false;
            }

            row--;
            col++;
        }

        return true;
    }

    private static boolean isDownPrimaryDiagonal(char[][] matrix, int row, int col) {

        while (row <= 0 && col <= matrix.length - 1) {

            if (matrix[row][col] == 'q') {

                return false;

            }

            row++;
            col++;
        }

        return true;
    }

    private static boolean isUpPrimaryDiagonal(char[][] matrix, int row, int col) {

        while (row >= 0 && col >= 0) {

            if (matrix[row][col] == 'q') {

                return false;

            }

            row--;
            col--;

        }

            return true;

    }

    private static void fillMatrix(char[][] matrix, Scanner scanner) {

        for (int row = 0; row < matrix.length; row++) {

            String currentLine = scanner.nextLine().replace(" ", "");

            char[] currentRow = currentLine.toCharArray();

            matrix[row] = currentRow;

        }
    }
}
