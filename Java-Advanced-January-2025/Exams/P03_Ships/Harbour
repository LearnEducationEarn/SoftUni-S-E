package Exam.P03_Ships;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class Harbor {

    private String location;
    private int minDepth;
    private List<Ship> ships;

    public Harbor(String location, int minDepth) {
        this.location = location;
        this.minDepth = minDepth;
        this.ships = new ArrayList<>();
    }

    public String addShip(Ship ship) {
        for (Ship existingShip : ships) {
            if (existingShip.getName().equals(ship.getName())) {
                return "Ship with this name already exists!";
            }
        }

        if (ship.getDraft() > minDepth) {
            return "The ship " + ship.getName() + " cannot dock due to draft limitations!";
        }

        ships.add(ship);
        return "Ship " + ship.getName() + " added to the harbor.";
    }

    public boolean removeShip(String name) {
        return ships.removeIf(ship -> ship.getName().equals(name));
    }

    public String getShipsByType(String type) {
        List<String> matchingShips = ships.stream()
                .filter(ship -> ship.getType().equals(type))
                .map(Ship::getName)
                .collect(Collectors.toList());

        if (matchingShips.isEmpty()) {
            return "There are no Exam.ships of the requested type.";
        }

        return "Ships of type " + type + ": " + String.join(", ", matchingShips);
    }

    public Ship getShipByName(String name) {
        return ships.stream()
                .filter(ship -> ship.getName().equals(name))
                .findFirst()
                .orElse(null);
    }

    public String getLargestShip() {
        if (ships.isEmpty()) {
            return "No Exam.ships in the harbor.";
        }

        Ship largestShip = ships.stream()
                .max((ship1, ship2) -> Integer.compare(ship1.getTonnage(), ship2.getTonnage()))
                .orElse(null);

        return largestShip.getName() + " is the largest ship with a tonnage of " + largestShip.getTonnage() + " tons.";
    }

    public int getCount() {
        return ships.size();
    }

    public String getStatistics() {
        if (ships.isEmpty()) {
            return "No Exam.ships docked in " + location + ".";
        }

        StringBuilder statistics = new StringBuilder("Ships docked in " + location + ":\n");
        for (Ship ship : ships) {
            statistics.append("* ").append(ship.getName()).append("\n");
        }

        return statistics.toString().trim();
    }
}

